/*
 * storage open api
 * storage open api
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.xopenapi.storage;

import com.xopenapi.ApiCallback;
import com.xopenapi.ApiClient;
import com.xopenapi.ApiException;
import com.xopenapi.ApiResponse;
import com.xopenapi.Configuration;
import com.xopenapi.Pair;
import com.xopenapi.ProgressRequestBody;
import com.xopenapi.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.xopenapi.storage.model.CredentialsReq;
import com.xopenapi.storage.model.CredentialsRsp;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class CredentialsApi {
    private ApiClient localVarApiClient;

    public CredentialsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public CredentialsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for credentials
     * @param timestamp  (optional)
     * @param noncestr  (optional)
     * @param signature  (optional)
     * @param credentialsReq  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 成功获取上传凭证 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call credentialsCall(String timestamp, String noncestr, String signature, CredentialsReq credentialsReq, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = credentialsReq;

        // create path and map variables
        String localVarPath = "/credentials";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (timestamp != null) {
            localVarHeaderParams.put("Timestamp", localVarApiClient.parameterToString(timestamp));
        }

        if (noncestr != null) {
            localVarHeaderParams.put("Noncestr", localVarApiClient.parameterToString(noncestr));
        }

        if (signature != null) {
            localVarHeaderParams.put("Signature", localVarApiClient.parameterToString(signature));
        }

        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback, false);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call credentialsValidateBeforeCall(String timestamp, String noncestr, String signature, CredentialsReq credentialsReq, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = credentialsCall(timestamp, noncestr, signature, credentialsReq, _callback);
        return localVarCall;

    }

    /**
     * 获取上传凭证
     * 获取上传凭证
     * @param timestamp  (optional)
     * @param noncestr  (optional)
     * @param signature  (optional)
     * @param credentialsReq  (optional)
     * @return CredentialsRsp
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 成功获取上传凭证 </td><td>  -  </td></tr>
     </table>
     */
    public CredentialsRsp credentials(String timestamp, String noncestr, String signature, CredentialsReq credentialsReq) throws ApiException {
        ApiResponse<CredentialsRsp> localVarResp = credentialsWithHttpInfo(timestamp, noncestr, signature, credentialsReq);
        return localVarResp.getData();
    }

    /**
     * 获取上传凭证
     * 获取上传凭证
     * @param timestamp  (optional)
     * @param noncestr  (optional)
     * @param signature  (optional)
     * @param credentialsReq  (optional)
     * @return ApiResponse&lt;CredentialsRsp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 成功获取上传凭证 </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CredentialsRsp> credentialsWithHttpInfo(String timestamp, String noncestr, String signature, CredentialsReq credentialsReq) throws ApiException {
        okhttp3.Call localVarCall = credentialsValidateBeforeCall(timestamp, noncestr, signature, credentialsReq, null);
        Type localVarReturnType = new TypeToken<CredentialsRsp>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 获取上传凭证 (asynchronously)
     * 获取上传凭证
     * @param timestamp  (optional)
     * @param noncestr  (optional)
     * @param signature  (optional)
     * @param credentialsReq  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 成功获取上传凭证 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call credentialsAsync(String timestamp, String noncestr, String signature, CredentialsReq credentialsReq, final ApiCallback<CredentialsRsp> _callback) throws ApiException {

        okhttp3.Call localVarCall = credentialsValidateBeforeCall(timestamp, noncestr, signature, credentialsReq, _callback);
        Type localVarReturnType = new TypeToken<CredentialsRsp>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
